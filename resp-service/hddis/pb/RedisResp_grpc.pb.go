// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: RedisResp.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RedisRespService_Get_FullMethodName      = "/hddis.RedisRespService/Get"
	RedisRespService_Set_FullMethodName      = "/hddis.RedisRespService/Set"
	RedisRespService_HGet_FullMethodName     = "/hddis.RedisRespService/HGet"
	RedisRespService_HSet_FullMethodName     = "/hddis.RedisRespService/HSet"
	RedisRespService_HGetAll_FullMethodName  = "/hddis.RedisRespService/HGetAll"
	RedisRespService_LPush_FullMethodName    = "/hddis.RedisRespService/LPush"
	RedisRespService_LRange_FullMethodName   = "/hddis.RedisRespService/LRange"
	RedisRespService_SAdd_FullMethodName     = "/hddis.RedisRespService/SAdd"
	RedisRespService_SMembers_FullMethodName = "/hddis.RedisRespService/SMembers"
)

// RedisRespServiceClient is the client API for RedisRespService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 服务定义
type RedisRespServiceClient interface {
	// 字符串操作
	Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RedisResponse, error)
	Set(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*RedisResponse, error)
	// 哈希操作
	HGet(ctx context.Context, in *HashFieldRequest, opts ...grpc.CallOption) (*RedisResponse, error)
	HSet(ctx context.Context, in *HashFieldRequest, opts ...grpc.CallOption) (*RedisResponse, error)
	HGetAll(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RedisResponse, error)
	// 列表操作
	LPush(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*RedisResponse, error)
	LRange(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RedisResponse, error)
	// 集合操作
	SAdd(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*RedisResponse, error)
	SMembers(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RedisResponse, error)
}

type redisRespServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisRespServiceClient(cc grpc.ClientConnInterface) RedisRespServiceClient {
	return &redisRespServiceClient{cc}
}

func (c *redisRespServiceClient) Get(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisRespServiceClient) Set(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_Set_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisRespServiceClient) HGet(ctx context.Context, in *HashFieldRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_HGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisRespServiceClient) HSet(ctx context.Context, in *HashFieldRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_HSet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisRespServiceClient) HGetAll(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_HGetAll_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisRespServiceClient) LPush(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_LPush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisRespServiceClient) LRange(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_LRange_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisRespServiceClient) SAdd(ctx context.Context, in *KeyValueRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_SAdd_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisRespServiceClient) SMembers(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*RedisResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RedisResponse)
	err := c.cc.Invoke(ctx, RedisRespService_SMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisRespServiceServer is the server API for RedisRespService service.
// All implementations must embed UnimplementedRedisRespServiceServer
// for forward compatibility.
//
// 服务定义
type RedisRespServiceServer interface {
	// 字符串操作
	Get(context.Context, *KeyRequest) (*RedisResponse, error)
	Set(context.Context, *KeyValueRequest) (*RedisResponse, error)
	// 哈希操作
	HGet(context.Context, *HashFieldRequest) (*RedisResponse, error)
	HSet(context.Context, *HashFieldRequest) (*RedisResponse, error)
	HGetAll(context.Context, *KeyRequest) (*RedisResponse, error)
	// 列表操作
	LPush(context.Context, *KeyValueRequest) (*RedisResponse, error)
	LRange(context.Context, *KeyRequest) (*RedisResponse, error)
	// 集合操作
	SAdd(context.Context, *KeyValueRequest) (*RedisResponse, error)
	SMembers(context.Context, *KeyRequest) (*RedisResponse, error)
	mustEmbedUnimplementedRedisRespServiceServer()
}

// UnimplementedRedisRespServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRedisRespServiceServer struct{}

func (UnimplementedRedisRespServiceServer) Get(context.Context, *KeyRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRedisRespServiceServer) Set(context.Context, *KeyValueRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRedisRespServiceServer) HGet(context.Context, *HashFieldRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGet not implemented")
}
func (UnimplementedRedisRespServiceServer) HSet(context.Context, *HashFieldRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HSet not implemented")
}
func (UnimplementedRedisRespServiceServer) HGetAll(context.Context, *KeyRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HGetAll not implemented")
}
func (UnimplementedRedisRespServiceServer) LPush(context.Context, *KeyValueRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPush not implemented")
}
func (UnimplementedRedisRespServiceServer) LRange(context.Context, *KeyRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LRange not implemented")
}
func (UnimplementedRedisRespServiceServer) SAdd(context.Context, *KeyValueRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SAdd not implemented")
}
func (UnimplementedRedisRespServiceServer) SMembers(context.Context, *KeyRequest) (*RedisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SMembers not implemented")
}
func (UnimplementedRedisRespServiceServer) mustEmbedUnimplementedRedisRespServiceServer() {}
func (UnimplementedRedisRespServiceServer) testEmbeddedByValue()                          {}

// UnsafeRedisRespServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisRespServiceServer will
// result in compilation errors.
type UnsafeRedisRespServiceServer interface {
	mustEmbedUnimplementedRedisRespServiceServer()
}

func RegisterRedisRespServiceServer(s grpc.ServiceRegistrar, srv RedisRespServiceServer) {
	// If the following call pancis, it indicates UnimplementedRedisRespServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RedisRespService_ServiceDesc, srv)
}

func _RedisRespService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).Get(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisRespService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_Set_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).Set(ctx, req.(*KeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisRespService_HGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).HGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_HGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).HGet(ctx, req.(*HashFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisRespService_HSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HashFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).HSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_HSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).HSet(ctx, req.(*HashFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisRespService_HGetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).HGetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_HGetAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).HGetAll(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisRespService_LPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).LPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_LPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).LPush(ctx, req.(*KeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisRespService_LRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).LRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_LRange_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).LRange(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisRespService_SAdd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).SAdd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_SAdd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).SAdd(ctx, req.(*KeyValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisRespService_SMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisRespServiceServer).SMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedisRespService_SMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisRespServiceServer).SMembers(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisRespService_ServiceDesc is the grpc.ServiceDesc for RedisRespService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisRespService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hddis.RedisRespService",
	HandlerType: (*RedisRespServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RedisRespService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _RedisRespService_Set_Handler,
		},
		{
			MethodName: "HGet",
			Handler:    _RedisRespService_HGet_Handler,
		},
		{
			MethodName: "HSet",
			Handler:    _RedisRespService_HSet_Handler,
		},
		{
			MethodName: "HGetAll",
			Handler:    _RedisRespService_HGetAll_Handler,
		},
		{
			MethodName: "LPush",
			Handler:    _RedisRespService_LPush_Handler,
		},
		{
			MethodName: "LRange",
			Handler:    _RedisRespService_LRange_Handler,
		},
		{
			MethodName: "SAdd",
			Handler:    _RedisRespService_SAdd_Handler,
		},
		{
			MethodName: "SMembers",
			Handler:    _RedisRespService_SMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "RedisResp.proto",
}
